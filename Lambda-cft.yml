Resources:

  lambdafnrole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lambdafnrole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonRedshiftFullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
        - arn:aws:iam::aws:policy/CloudWatchEventsFullAccess
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
        - arn:aws:iam::aws:policy/AmazonEventBridgeSchedulerFullAccess
        - arn:aws:iam::aws:policy/AmazonEventBridgeFullAccess
   
   lamvdafun1url:
    Type: AWS::Lambda::Url
    Properties: 
      AuthType: NONE
      TargetFunctionArn: !Ref lambdafunc1deploy.Arn

  function2:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: function2
      Role: !GetAtt lambdafnrole.Arn
      Runtime: python3.7
      Handler: index.my_handler
      Code:
        ZipFile: |
          def my_handler(event, context):
            message = 'Hello Lambda World!'
            return message

  function1:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: function1
      Role: !GetAtt lambdafnrole.Arn
      Runtime: python3.7
      Handler: index.my_handler
      Code:
        ZipFile: |
          def my_handler(event, context):
            message = 'Hello Lambda World!'
            return message
  lamvdafun1resourceperm:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: String
      FunctionName: String
      Principal: String
